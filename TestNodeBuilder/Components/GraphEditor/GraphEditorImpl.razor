@inject IServiceProvider sp

<CascadingValue Value="@this">

<div class="position-relative d-flex flex-column w-100 h-100 @Class" style="@Style">

    <GraphEditorToolbar @ref="@toolbar"
        OnTokensClicked="@EditTokens" />

    <GraphPane Class="flex-grow-1 flex-shrink-1" @ref="@pane">

        @ChildContent

    </GraphPane>

</div>

</CascadingValue>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public string Style { get; set; } = "";

    private GraphEditorToolbar? toolbar;
    public GraphEditorToolbar Toolbar => toolbar ?? throw new Exception("Graph editor toolbar is not ready yet");

    private GraphPane? pane;
    public GraphPane Pane => pane ?? throw new Exception("Graph pane is not ready yet");

    public TokensForm? TokensForm { get; private set; }

    private async Task EditTokens()
    {
        using (TokensForm = sp.GetRequiredService<TokensForm>())
        {
            TokensForm.Disposed += (_, __) =>
            {
                TokensForm = null;
                _ = InvokeAsync(StateHasChanged);
            };

            //TokensForm.Show();
            _ = await TokensForm.ShowDialogAsync();
        }
    }
}

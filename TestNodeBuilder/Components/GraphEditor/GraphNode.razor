@implements IDisposable

<div id="@Id" class="d-flex flex-row align-items-center">

    <div class="left-anchor position-relative">

        @if (LeftInput)
        {
            <div class="left-input">
            </div>
        }

        <div class="node-buttons">
            <div @onpointerdown:stopPropagation>

            </div>
        </div>

    </div>

    <div class="graph-node d-flex flex-row gap-2 p-2 align-items-center @Class" style="@NodeStyle">

        @ChildContent

    </div>

    <div class="right-anchor position-relative">

        @if (RightOutput)
        {
            <div class="right-output">
            </div>
        }

        <div class="node-buttons">
            <div @onpointerdown:stopPropagation>

                @if (RightOutput && !RightOutputConnected)
                {
                    <span class="icon-button" @onclick="@AddOutputClicked">
                        @SD.Icons.BiNodePlus(size: 20)
                    </span>
                }

            </div>
        </div>

    </div>

</div>

@code {
    [CascadingParameter]
    public GraphEdgeContext? EdgeContext { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public decimal? HeightCm { get; set; }

    [Parameter]
    public bool LeftInput { get; set; }

    [Parameter]
    public bool RightOutput { get; set; }

    [Parameter]
    [EditorRequired]
    public string Id { get; set; } = "";

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public string Style { get; set; } = "";

    [Parameter]
    public EventCallback AddOutputClicked { get; set; }

    private string NodeStyle => string.Join("",
        HeightCm.HasValue ? $"height: {HeightCm:0.000}cm;" : "",
        Style);

    public bool LeftInputConnected { get; private set; }
    public bool RightOutputConnected { get; private set; }

    //TODO
    private bool _LeftInputConnected => EdgeContext is not null
        && EdgeContext.PlottedEdges.Any((it) => it.CreatedFrom.SelectorTo == $"#{Id} .left-input");

    //TODO
    private bool _RightOutputConnected => EdgeContext is not null
        && EdgeContext.PlottedEdges.Any((it) => it.CreatedFrom.SelectorFrom == $"#{Id} .right-output");

    private bool subscribed;

    private async Task EvaluateConnectedState()
    {
        var oldL = LeftInputConnected;
        var oldR = RightOutputConnected;

        LeftInputConnected = _LeftInputConnected;
        RightOutputConnected = _RightOutputConnected;

        if (oldL != LeftInputConnected || oldR != RightOutputConnected)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (EdgeContext is not null)
        {
            EdgeContext.EdgesChanged += EvaluateConnectedState;
            subscribed = true;

            await EvaluateConnectedState();
        }
    }

    public void Dispose()
    {
        GC.SuppressFinalize(this);

        if (subscribed)
        {
            EdgeContext!.EdgesChanged -= EvaluateConnectedState;
            subscribed = false;
        }
    }
}

<div class="graph-pane"
    @onmousewheel="@HandleMouseWheel"
    @onpointerdown="@HandlePointerDown"
    @onpointermove="@HandlePointerMove"
    @onpointerup="@HandlePointerUp"
    @onpointerleave="@HandlePointerUp">

    <div class="graph-pane-content" style="@ContentStyle">

        <div class="cm-dots" style="@DotsStyle"></div>

        <RenderBarrier @ref="@renderBarrier">
            @ChildContent
        </RenderBarrier>

    </div>

</div>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private RenderBarrier? renderBarrier;

    private const double MIN_SCALE = 0.5, MAX_SCALE = 1.5;
    private double scale;

    private double EffectiveScale => MIN_SCALE + (scale + 1) / 2 * (MAX_SCALE - MIN_SCALE);

    private double offsetX, offsetY;
    private bool dragging;

    private string ContentStyle => string.Join("",
        $"transform: scale({EffectiveScale:0.000}) translateX({offsetX:0.000}px) translateY({offsetY:0.000}px);",
        $"width: {100.0 / EffectiveScale:0.000}%;",
        $"height: {100.0 / EffectiveScale:0.000}%;");

    private string DotsStyle => string.Join("",
        $"left: {-offsetX:0.000}px;",
        $"top: {-offsetY:0.000}px;",
        $"background-position: calc(0.5cm + {offsetX:0.000}px) calc(0.5cm + {offsetY:0.000}px),",
        $"  calc(0.25cm + {offsetX:0.000}px) calc(0.25cm + {offsetY:0.000}px);");

    private bool shouldRender = true;

    protected override bool ShouldRender() => shouldRender;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        shouldRender = false;
    }

    private void HandleMouseWheel(WheelEventArgs ev)
    {
        if (!ev.ShiftKey)
        {
            scale = Math.Clamp(scale - ev.DeltaY / 1000, -1, 1);
            shouldRender = true;
        }
    }

    private void HandlePointerDown()
    {
        dragging = true;
    }

    private void HandlePointerMove(PointerEventArgs ev)
    {
        if (dragging)
        {
            offsetX += ev.MovementX / EffectiveScale;
            offsetY += ev.MovementY / EffectiveScale;
            shouldRender = true;
        }
    }

    private void HandlePointerUp()
    {
        dragging = false;
    }

    public async Task Redraw()
    {
        if (renderBarrier is not null)
        {
            await renderBarrier.Redraw();
        }
    }
}

<GraphEditorImpl Style="height: 100vh !important;" @ref="@graphEditor">

    <DragContainer>
        <GraphNode Id="start-node" Class="pe-0 bg-dark text-light" Style="white-space: nowrap;" HeightCm="1" RightOutput>

            <h5 class="m-0 fw-bolder fst-italic">
                Start
            </h5>
            @SD.Icons.BiArrowRightShort(size: 40.0m)

        </GraphNode>
    </DragContainer>

    @for (var _i = 0; _i < numNodes; _i++)
    {
        var i = _i;

        <DragContainer InitialPosition="(i * 110 + 130, i * 110 + 130)">
            <GraphNode Id="@($"node-{i}")"
                Style="white-space: nowrap;"
                HeightCm="1"
                LeftInput
                RightOutput
                AddOutputClicked="@(async () => await AddNode(i))">

                <h5 class="m-0">Node @i</h5>

            </GraphNode>
        </DragContainer>
    }

</GraphEditorImpl>

@code {
    [Parameter]
    public HomeForm? Form { get; set; }

    private GraphEditorImpl? graphEditor;
    private int numNodes = 2;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            Form!.Opacity = 1.0;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            //TODO Add edges from saved graph
            graphEditor!.Pane.EdgeContext.DomEdges.Add(new()
            {
                SelectorFrom = "#start-node .right-output",
                SelectorTo = "#node-0 .left-input",
                Color = "red"
            });
            graphEditor!.Pane.EdgeContext.DomEdges.Add(new()
            {
                SelectorFrom = "#node-0 .right-output",
                SelectorTo = "#node-1 .left-input",
                Dashed = true
            });

            await graphEditor.Pane.RebuildPlottedEdges();
        }
    }

    //TODO
    private async Task AddNode(int currNode)
    {
        graphEditor!.Pane.EdgeContext.DomEdges.Add(new()
        {
            SelectorFrom = $"#node-{currNode} .right-output",
            SelectorTo = $"#node-{numNodes++} .left-input"
        });

        await graphEditor.Pane.RebuildPlottedEdges();
    }
}
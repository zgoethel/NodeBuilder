@inject IServiceProvider sp
@inject GraphEdgeContext edgeContext

<CascadingValue Value="@edgeContext">

<div class="p-3" style="position: relative;height: 100vh;">

    <GraphPane Style="position: absolute;left: 0;top: 0;width: 100%;height: 100%;" @ref="@graphPane">

        <RenderBarrier @ref="@edgeBarrier">
            
            @foreach (var edge in edgeContext.PlottedEdges)
            {
                <GraphEdge @key="@edge" From="@edge.From" To="@edge.To" />
            }

        </RenderBarrier>

        <DragContainer PositionChanged="@edgeContext.RebuildPlottedEdges" Class="node-a">
            <GraphNode Class="pe-0 bg-dark text-light" HeightCm="1" RightOutput>

                <h5 class="m-0 fw-bolder fst-italic">
                    Start
                </h5>

                <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="currentColor" class="bi bi-arrow-right-short" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M4 8a.5.5 0 0 1 .5-.5h5.793L8.146 5.354a.5.5 0 1 1 .708-.708l3 3a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708-.708L10.293 8.5H4.5A.5.5 0 0 1 4 8" />
                </svg>

            </GraphNode>
        </DragContainer>

        <DragContainer InitialPosition="(0, 50)" PositionChanged="@edgeContext.RebuildPlottedEdges" Class="node-b">
            <GraphNode HeightCm="1" LeftInput RightOutput>

                <h5 class="m-0">Token</h5>

            </GraphNode>
        </DragContainer>

    </GraphPane>

</div>

</CascadingValue>

@code {
    [Parameter]
    public HomeForm? Form { get; set; }

    private GraphPane? graphPane;
    private RenderBarrier? edgeBarrier;

    private async Task RedrawEdges()
    {
        if (edgeBarrier is not null)
        {
            await edgeBarrier.Redraw();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        edgeContext.DomEdges.Add(new()
        {
            SelectorFrom = ".node-a .right-anchor",
            SelectorTo = ".node-b .left-anchor"
        });
        edgeContext.EdgesChanged += RedrawEdges;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            Form!.Opacity = 1.0;
        }
    }

    private async Task EditToken(string regex)
    {
        var nextForm = sp.GetRequiredService<EditTokenForm>();
        var token = await nextForm.ShowEditTokenForm(regex, (_) => "Invalid");
    }
}